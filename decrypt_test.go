package decrypt

import (
	"encoding/base64"
	"testing"
)

const data = "AYADeNW2vz1YlyOJe3DaAV9dY+0AXwABABVhd3MtY3J5cHRvLXB1YmxpYy1rZXkAREFocFlONG9sZUliK3A5SEpia2JkRHEybTlBZ0ZpYmh4YjFuVEllYldxZ3QrcVpMVDZ2Rld4MEU2S29FSVVwRU1vUT09AAEADUFtYXpvbkNvbm5lY3QAJGZhMGVmODNmLWZiZmEtNGFjZC05YmRiLWE4NTY0ZDM1NDkwZQIAVgxW3u2jtRb+cgmrp360Lm2Le5zXicncVwxOqDc8V8dw+nAJbGgKUoljgFOmv3mBv7YDdVBnxZ1heztWGkKqnl0P55hyIE90C6a7CzxbZakHQo26E7koOjWzTnhx4CwYTDfi0QKTV1DbiCuk+Q/vkWW0D+fszegcCqIVDrN7vOZ0vlztGVadjO/kIvE2J4gH097G2xSj0I3BLj9vzfpPTK9vKl3JtFUWmUnVop3Og9k5/uNeA8J+tpJ++kdBaNQDvZ3jmmX5rcX/yfQsm7Bb3jG/D3DDrqd7lkvAM0cFnlB1Ex423l91xZdY1hD7+zMg3H6xYFRfz6N4D1vzQApbCHUImbv9QYOzgFpOrhmA/05iBB6X0NJ+iKrIgl3XzkhJ3f11Nla0DdElwJgkM1DNYMLy6btJLbtmGnUnEcxQQNc6FMAs7HYxP2VYLRgNFcwaKdPpyujjtZFPPfee0fio3DVNOhK99mB1adYweMjw20oe0F4SAE22ko+dwH3byicYWehgK4H+0Jw+hnCE0QZHH5MmRskfwowFZFAUC86PFcV14jwxxCEOswlZfZbdqiV1M4ZpEfPFYTfB9DUly8UxkgXmp9Kfu6C9kkusyKuWEqToOa6zBZPZdlaQ3382euy1vkOEfPeJAHlwwCBLXCH8B4L+K0Hj8n1k78+cwV6xkPcCAAAAAAwAABAAZbGev27PdBpJJVvEx4oXrfti1M03k3wjP+Eb3P////8AAAABE8poIPKPMHXdXKIDAAAACLDMhXW7QP/V8civynoaalmWWF15UeYr5ABnMGUCMQCApNm9VMMD47eAje5xI84TZTGByXi+o4kXyQhMTJ8kL0eDHvcphILtrte0WtQ7Ky0CMB5Tolvd2Jn/Q+Zxoko6Mq2djJviktbEpM3D3nwfVBhB53/KCpuOTm7CijnWrBdp9Q=="
const key = `-----BEGIN PRIVATE KEY-----
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
7fqN/oyWw1brXLKZUt9N7DkXnIfsjZlZ
-----END PRIVATE KEY-----`

func Test(t *testing.T) {
	kms, err := NewKMS([]byte(key))
	if err != nil {
		t.Fatalf("unexpected error creating decrypter: %s", err)
	}
	dataBytes, err := base64.StdEncoding.DecodeString(data)
	if err != nil {
		t.Fatalf("unexpected error decoding base64: %s", err)
	}
	result, err := kms.Decrypt(dataBytes)
	if err != nil {
		t.Fatalf("unexpected error decrypting: %s", err)
	}
	if string(result) != "12345678" {
		t.Errorf("expected decrypted result of '12345678' but got '%s'", string(result))
	}
}
